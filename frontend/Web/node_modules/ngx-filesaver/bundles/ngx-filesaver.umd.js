(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('file-saver'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('ngxFileSaver', ['exports', '@angular/core', 'file-saver', '@angular/common/http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ngxFileSaver = {}, global.ng.core, global.saveAs, global.ng.common.http));
}(this, (function (exports, i0, fileSaver, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var FileSaverService = /** @class */ (function () {
        function FileSaverService() {
        }
        Object.defineProperty(FileSaverService.prototype, "isFileSaverSupported", {
            get: function () {
                try {
                    return !!new Blob();
                }
                catch (e) {
                    return false;
                }
            },
            enumerable: false,
            configurable: true
        });
        FileSaverService.prototype.genType = function (fileName) {
            if (!fileName || fileName.lastIndexOf('.') === -1) {
                return 'text/plain';
            }
            var type = fileName.substr(fileName.lastIndexOf('.') + 1);
            switch (type) {
                case 'txt':
                    return 'text/plain';
                case 'xml':
                case 'html':
                    return "text/" + type;
                case 'json':
                    return 'octet/stream';
                default:
                    return "application/" + type;
            }
        };
        FileSaverService.prototype.save = function (blob, fileName, filtType, option) {
            if (!blob) {
                throw new Error('Data argument should be a blob instance');
            }
            var file = new Blob([blob], { type: filtType || blob.type || this.genType(fileName) });
            fileSaver.saveAs(file, decodeURI(fileName || 'download'), option);
        };
        FileSaverService.prototype.saveText = function (txt, fileName, option) {
            var blob = new Blob([txt]);
            this.save(blob, fileName, undefined, option);
        };
        return FileSaverService;
    }());
    FileSaverService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: FileSaverService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    FileSaverService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: FileSaverService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: FileSaverService, decorators: [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }] });

    var FileSaverDirective = /** @class */ (function () {
        function FileSaverDirective(el, fss, httpClient) {
            this.el = el;
            this.fss = fss;
            this.httpClient = httpClient;
            this.method = 'GET';
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            if (!fss.isFileSaverSupported) {
                el.nativeElement.classList.add("filesaver__not-support");
            }
        }
        FileSaverDirective.prototype.getName = function (res) {
            return decodeURI(this.fileName || res.headers.get('filename') || res.headers.get('x-filename') || '');
        };
        FileSaverDirective.prototype._click = function () {
            var _this = this;
            if (!this.fss.isFileSaverSupported) {
                return;
            }
            var req = this.http;
            if (!req) {
                var params = new i2.HttpParams();
                var query = this.query || {};
                // tslint:disable-next-line:forin
                for (var item in query) {
                    params = params.set(item, query[item]);
                }
                req = this.httpClient.request(this.method, this.url, {
                    observe: 'response',
                    responseType: 'blob',
                    headers: this.header,
                    params: params,
                });
            }
            this.setDisabled(true);
            req.subscribe(function (res) {
                if (res.status !== 200 || res.body.size <= 0) {
                    _this.error.emit(res);
                    return;
                }
                _this.fss.save(res.body, _this.getName(res), undefined, _this.fsOptions);
                _this.success.emit(res);
            }, function (err) { return _this.error.emit(err); }, function () { return _this.setDisabled(false); });
        };
        FileSaverDirective.prototype.setDisabled = function (status) {
            var el = this.el.nativeElement;
            el.disabled = status;
            el.classList[status ? 'add' : 'remove']("filesaver__disabled");
        };
        return FileSaverDirective;
    }());
    FileSaverDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: FileSaverDirective, deps: [{ token: i0__namespace.ElementRef }, { token: FileSaverService }, { token: i2__namespace.HttpClient }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    FileSaverDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.2", type: FileSaverDirective, selector: "[fileSaver]", inputs: { method: "method", http: "http", query: "query", header: "header", url: "url", fileName: "fileName", fsOptions: "fsOptions" }, outputs: { success: "success", error: "error" }, host: { listeners: { "click": "_click()" } }, exportAs: ["fileSaver"], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: FileSaverDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[fileSaver]',
                        exportAs: 'fileSaver',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: FileSaverService }, { type: i2__namespace.HttpClient }]; }, propDecorators: { method: [{
                    type: i0.Input
                }], http: [{
                    type: i0.Input
                }], query: [{
                    type: i0.Input
                }], header: [{
                    type: i0.Input
                }], url: [{
                    type: i0.Input
                }], fileName: [{
                    type: i0.Input
                }], fsOptions: [{
                    type: i0.Input
                }], success: [{
                    type: i0.Output
                }], error: [{
                    type: i0.Output
                }], _click: [{
                    type: i0.HostListener,
                    args: ['click']
                }] } });

    var FileSaverModule = /** @class */ (function () {
        function FileSaverModule() {
        }
        return FileSaverModule;
    }());
    FileSaverModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: FileSaverModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FileSaverModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: FileSaverModule, declarations: [FileSaverDirective], exports: [FileSaverDirective] });
    FileSaverModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: FileSaverModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.2", ngImport: i0__namespace, type: FileSaverModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [FileSaverDirective],
                        exports: [FileSaverDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.FileSaverDirective = FileSaverDirective;
    exports.FileSaverModule = FileSaverModule;
    exports.FileSaverService = FileSaverService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-filesaver.umd.js.map
